<head>
    <title>Messages</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
</head>

<style>
    .chat-container {
        max-width: 1300px;
        margin: auto;
        padding-left: 25px;
        padding-right: 25px;
        display: flex;
        overflow: hidden;
        margin-bottom: 10px;
        height: 87vh;
    }

    .chat-sidebar {
        width: 300px;
        background: #f4f4f4;
        border-right: 1px solid #ddd;
        display: flex;
        flex-direction: column;
    }

    .user-profile {
        height: 80px;
        padding: 15px;
        display: flex;
        align-items: center;
        background: #000080ce;
        color: white;
    }

    .avatar-wrapper {
        position: relative;
        display: inline-block;
    }

    .avatar-wrapper img {
        border-radius: 50%;
        width: 45px;
        height: 45px;
        object-fit: cover;
        border: 2px solid #ccc;
    }

    .status-indicator {
        position: absolute;
        bottom: 0;
        right: 0;
        width: 12px;
        height: 12px;
        border-radius: 50%;
        border: 2px solid white;
        /* Border to separate from avatar */
    }

    .status-indicator.online {
        background-color: #4caf50;
        /* Green for online */
    }

    .status-indicator.offline {
        background-color: #f44336;
        /* Red for offline */
    }

    .search-box {
        position: relative;
        padding: 10px;
    }

    .search-box .search-icon {
        position: absolute;
        top: 50%;
        left: 25px;
        transform: translateY(-50%);
        color: #9ca3af;
        font-size: 16px;
    }

    .search-box input {
        width: 100%;
        padding: 8px 8px 8px 40px;
        /* Add padding to the left for the icon */
        border: 1px solid #ccc;
        border-radius: 20px;
    }

    .chat-list {
        flex-grow: 1;
        padding: 15px;
        overflow-y: auto;
    }

    .chat-item {
        display: flex;
        align-items: center;
        padding: 10px;
        cursor: pointer;
        border-radius: 5px;
    }

    .chat-item:hover {
        background: #ddd;
    }

    .chat-item.selected {
        background: #000080ce;
        /* Change to your desired color */
        color: white;
        /* Optional: Change text color */
    }

    .chat-box {
        width: 1000px;
        display: flex;
        flex-direction: column;
    }

    .chat-header {
        height: 80px;
        padding: 15px;
        display: flex;
        align-items: center;
        background: #000080ce;
        color: white;
        font-weight: bold;
    }

    .messages {
        flex: 1;
        padding: 20px;
        background: #F0F2F5;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
    }

    .message {
        margin: 5px;
        padding: 10px;
        border-radius: 15px;
        max-width: 70%;
        word-wrap: break-word;
    }

    .sent {
        background: #000080ce;
        color: white;
        align-self: flex-end;
    }

    .sent .time {
        align-self: flex-end;
    }

    .received {
        background: #dedddd;
        align-self: flex-start;
        border: 1px solid #EEE;
    }

    .received .time {
        align-self: flex-start;
    }

    .input-box {
        display: flex;
        padding: 10px;
        background: #F0F2F5;
        align-items: center;
    }

    .input-box input {
        flex-grow: 1;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 20px;
    }

    .input-box button {
        margin-left: 10px;
        border: none;
        background: #000080ce;
        color: white;
        border-radius: 50%;
        width: 40px;
        height: 40px;
    }

    .input-box button:hover {
        background: #000070;
    }
</style>

<body>
    <div class="chat-container">
        <div class="chat-sidebar">
            <div class="user-profile">
                <div class="avatar-wrapper">
                    <img src="{{currentUser.avatar}}" alt="User Avatar">
                    <span class="status-indicator {{#if currentUser.isOnline}}online{{else}}offline{{/if}}"
                        title="{{#if currentUser.isOnline}}Online{{else}}Offline{{/if}}">
                    </span>
                </div>
                <span class="ms-2">{{user.fullname}}</span>
            </div>
            <div class="search-box">
                <i class="fa-solid fa-magnifying-glass search-icon"></i>
                <input type="text" id="search-input" placeholder="Search for conversation...">
            </div>
            <div class="chat-list" id="chat-list">
                {{#each users}}
                <div class="chat-item" data-user-id="{{this._id}}" data-fullname="{{this.fullname}}"
                    onclick="selectUser('{{this._id}}', '{{this.fullname}}')">
                    <div class="avatar-wrapper">
                        <img src="{{this.avatar}}" alt="User Avatar">
                        <span class="status-indicator {{#if this.isOnline}}online{{else}}offline{{/if}}"
                            title="{{#if this.isOnline}}Online{{else}}Offline{{/if}}">
                        </span>
                    </div>
                    <span class="ms-2">{{this.fullname}}</span>
                </div>
                {{/each}}

            </div>
        </div>
        <div class="chat-box">
            <div class="chat-header" id="chat-header">Choose a person to chat with</div>
            <div class="messages" id="messages"></div>
            <div class="input-box">
                <input type="text" id="message-input" placeholder="Message..." onkeypress="handleKeyPress(event)">
                <button onclick="sendMessage()"><i class="fa-solid fa-paper-plane"></i></button>
            </div>
        </div>
    </div>

    <script>
        var socket = io();
        var currentUser = "{{user._id}}";
        var currentReceiver = null;

        socket.emit('registerUser', currentUser);

        function selectUser(userId, fullname) {
            currentReceiver = userId;
            document.getElementById("chat-header").innerText = "Chat with " + fullname;
            document.getElementById("messages").innerHTML = "";

            const chatItems = document.querySelectorAll('.chat-item');
            chatItems.forEach(item => item.classList.remove('selected'));

            const selectedItem = document.querySelector(`.chat-item[data-fullname="${fullname}"]`);
            if (selectedItem) {
                selectedItem.classList.add('selected');
            }

            fetch(`/message/chat/${userId}`)
                .then(response => response.json())
                .then(messages => {
                    messages.forEach(msg => {
                        addMessageToChat(msg.sender, msg.content, msg.createdAt);
                    });
                    scrollToBottom();
                })
                .catch(err => console.error("Lỗi khi tải tin nhắn:", err));
        }

        async function sendMessage() {
            const messageInput = document.getElementById('message-input');
            const message = messageInput.value.trim();

            if (!message || !currentReceiver) return;

            try {
                const response = await fetch('/message/chat', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ receiver: currentReceiver, content: message })
                });

                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.error);
                }

                const now = new Date().toISOString();

                socket.emit('sendMessage', {
                    sender: currentUser,
                    receiver: currentReceiver,
                    content: message,
                    createdAt: now
                });

                addMessageToChat(currentUser, message, now);
                messageInput.value = '';
                scrollToBottom();
            } catch (error) {
                alert('Gửi tin nhắn thất bại: ' + error.message);
            }
        }

        socket.on('receiveMessage', (msg) => {
            if (msg.receiver === currentUser && msg.sender === currentReceiver) {
                const isDuplicate = Array.from(document.querySelectorAll('.message')).some(el =>
                    el.dataset.sender === msg.sender &&
                    el.dataset.content === msg.content &&
                    el.dataset.time === msg.createdAt
                );

                if (!isDuplicate) {
                    addMessageToChat(msg.sender, msg.content, msg.createdAt);
                    scrollToBottom();
                }
            }
        });

        function addMessageToChat(sender, content, timestamp) {
            const className = sender === currentUser ? "sent" : "received";
            const time = new Date(timestamp).toLocaleTimeString([], {
                hour: '2-digit',
                minute: '2-digit',
                day: '2-digit',
                month: '2-digit',
                year: 'numeric'
            });
            const div = document.createElement('div');
            div.className = `message ${className}`;
            div.dataset.sender = sender;
            div.dataset.content = content;
            div.dataset.time = timestamp;

            div.innerHTML = `
            <div class="message-content">${content}</div>
            <div class="time" style="font-size: 12px;">${time}</div>
        `;
            document.getElementById("messages").appendChild(div);
        }

        function handleKeyPress(event) {
            if (event.key === "Enter" && !event.shiftKey) {
                event.preventDefault();
                sendMessage();
            }
        }

        function scrollToBottom() {
            const messagesDiv = document.getElementById('messages');
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        }

        document.getElementById('search-input').addEventListener('input', function () {
            const query = removeDiacritics(this.value.toLowerCase());
            const chatItems = document.querySelectorAll('.chat-item');

            chatItems.forEach(item => {
                const fullname = removeDiacritics(item.getAttribute('data-fullname').toLowerCase());
                item.style.display = fullname.includes(query) ? 'flex' : 'none';
            });
        });

        function removeDiacritics(str) {
            return str.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
        }

        // Listen for user status changes
        socket.on('userStatusChange', (data) => {
            const { userId, isOnline } = data;

            // Find the user's status indicator in the chat list
            const userStatusIndicator = document.querySelector(
                `.chat-item[data-fullname][data-user-id="${userId}"] .status-indicator`
            );

            if (userStatusIndicator) {
                // Update the status indicator's class
                userStatusIndicator.classList.toggle('online', isOnline);
                userStatusIndicator.classList.toggle('offline', !isOnline);

                // Update the title attribute for the tooltip
                userStatusIndicator.setAttribute('title', isOnline ? 'Online' : 'Offline');
            }

            // Update the current user's profile status if applicable
            if (userId === currentUser) {
                const profileStatusIndicator = document.querySelector('.user-profile .status-indicator');
                if (profileStatusIndicator) {
                    profileStatusIndicator.classList.toggle('online', isOnline);
                    profileStatusIndicator.classList.toggle('offline', !isOnline);

                    // Update the title attribute for the tooltip
                    profileStatusIndicator.setAttribute('title', isOnline ? 'Online' : 'Offline');
                }
            }
        });
    </script>
</body>
